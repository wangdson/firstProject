<?xml version="1.0" encoding="gbk"?>
<!-- Build an Android project. -->
<project name="wallpaper" default="10zipalign" basedir=".">

	<!-- 通用属性 -->
	<property file="build.properties" />
	
	<!-- 工程相关配置 -->
	<property name="libproject.abs.res" location="${mainproject.abs}/res" />
	<property name="libproject.abs.src" location="${mainproject.abs}/src" />
	<property name="libproject.abs.lib" location="${mainproject.abs}/libs" />
	<property name="libproject.package.name" value="com.liubing.testLibOne" />


	<!-- The absolute paths for the tools. -->
	<property name="android.framework"
		value="${sdk.home}/platforms/${sdk.platform}/framework.aidl">
	</property>

	<property name="android.core"
		value="${sdk.home}/platforms/${sdk.platform}/android.jar">
	</property>

	<property name="android.proguard" value="${sdk.home}/tools/proguard/lib/proguard.jar">
	</property>

	<property name="android.support.lib" value="${sdk.home}/tools/support">
	</property>

	<property name="jarsigner" value="${jdk.home}/bin/jarsigner">
	</property>

	<property name="zipalign" value="${sdk.home}/tools/zipalign">
	</property>

	<property name="dx" value="${sdk.home}/platform-tools/dx">
	</property>

	<property name="apk-builder" value="${sdk.home}/tools/apkbuilder">
	</property>

	<property name="aapt" value="${sdk.home}/platform-tools/aapt">
	</property>

	<property name="aidl" value="${sdk.home}/platform-tools/aapt">
	</property>

	<property name="adb" value="${sdk.home}/platform-tools/adb">
	</property>

	<!-- The absolute path. -->

	<property name="src.abs" value="${mainproject.abs}/src">
	</property>

	<property name="bin.abs" value="${mainproject.abs}/bin">
	</property>

	<property name="gen.abs" value="${mainproject.abs}/gen">
	</property>

	<property name="res.abs" value="${mainproject.abs}/res">
	</property>

	<property name="assets.abs" value="${mainproject.abs}/assets">
	</property>

	<property name="androidManifest.abs" value="${mainproject.abs}/AndroidManifest.xml">
	</property>

	<property name="dex.abs" value="${mainproject.abs}/bin/classes.dex">
	</property>

	<property name="resources.abs" value="${mainproject.abs}/bin/resources.ap_">
	</property>

	<property name="unsigned.abs" value="${bin.abs}/${ant.project.name}-unsigned.apk">
	</property>

	<property name="signed.abs" value="${bin.abs}/${ant.project.name}-signed.apk">
	</property>

	<property name="keystore.path" location="${mainproject.abs}/${keystore.name}" />

	<!-- 1.Cleaning the project -->

	<target name="1clean">

		<echo>
			Cleaning the project...
		</echo>

		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${bin.abs}" includes="**/*">
			</fileset>
		</delete>

		<delete includeemptydirs="true" verbose="true">
			<fileset dir="${gen.abs}" includes="**/*">
			</fileset>
		</delete>
	</target>

	<!-- 2 Generate R.java -->

	<target name="2generate" depends="1clean">
		<echo>
			Generating R.java / Manifest.java from the resources...
		</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-m" />
			<arg value="--auto-add-overlay" />
			<arg value="-J" />
			<arg value="${gen.abs}" />
			<arg value="-M" />
			<arg value="${androidManifest.abs}" />
			<arg value="-S" />
			<arg value="${res.abs}" />
			<arg value="-S" />
			<arg value="${libproject.abs.res}" />
			<!-- Library Project的包名 -->
			<arg value="-I" />
			<arg value="${android.core}" />
		</exec>
	</target>

	<!-- 3Convert and compile AIDL files. -->

	<target name="3aidl" depends="1clean">

		<echo>
			Compiling aidl files into Java classes...
		</echo>

		<apply executable="${aidl}" failonerror="true">

			<arg value="-p${android.framework}" />

			<arg value="-I${src.abs}" />

			<arg value="-o${gen.abs}" />

			<fileset dir="${src.abs}">

				<include name="**/*.aidl">
				</include>
			</fileset>
		</apply>
	</target>

	<!-- 4Compile srcdir="${framework_src.abs}:${src.abs}:${gen.abs}" 表示编译的源文件目录有三个 -->

	<target name="4compile" depends="1clean,2generate,3aidl">
         
	    <echo>
			4compile...
		</echo>
		
		<javac encoding="UTF-8" target="1.6" debug="off" extdirs=""
			includeantruntime="false"
			srcdir="${src.abs}:${gen.abs}:${libproject.abs.src}"
			destdir="${bin.abs}" bootclasspath="${android.core}">

			<classpath>
				<fileset dir="${android.support.lib}" includes="*.jar">
				</fileset>
			</classpath>
			
			<classpath>
				<fileset dir="${libproject.abs.lib}" includes="*.jar">
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- 5Convert and compress .class files to .dex file. -->

	<target name="5dex" depends="4compile">
		<echo>
			Converting compiled files and external libraries into dex format file...
		</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">

			<arg value="--dex" />

			<arg value="--output=${dex.abs}" />

			<arg path="${bin.abs}" />

			<fileset dir="${libproject.abs.lib}" includes="*.jar">
			</fileset>

		</apply>
	</target>

	<!-- 6Package the resources. -->

	<target name="6package">

		<echo>
			Packaging resources and assets...
		</echo>

		<exec executable="${aapt}" failonerror="true">

			<arg value="package" />

			<arg value="-f" />

			<arg value="-m" />

			<arg value="--auto-add-overlay" />

			<arg value="-M" />

			<arg value="${androidManifest.abs}" />

			<arg value="-S" />

			<arg value="${res.abs}" />

			<arg value="-S" />

			<arg value="${libproject.abs.res}" />

			<arg value="-A" />

			<arg value="${assets.abs}" />

			<arg value="-I" />

			<arg value="${android.core}" />

			<arg value="-F" />

			<arg value="${resources.abs}" />
		</exec>
	</target>

	<!-- 7Package an unsigned APK file. -->

	<target name="7genUnsignedApk" depends="5dex, 6package">

		<echo>
			Packaging an unsigned APK file...
		</echo>

		<exec executable="${apk-builder}" failonerror="true">

			<arg value="${unsigned.abs}" />

			<arg value="-u" />

			<arg value="-z" />

			<arg value="${resources.abs}" />

			<arg value="-f" />

			<arg value="${dex.abs}" />

			<arg value="-rf" />

			<arg value="${src.abs}" />

			<!-- 加jar库到应用包中 -->

			<arg value="-rj" />

			<arg value="${libproject.abs.lib}" />

			<!-- 加动态连接库到应用包中 -->

			<arg value="-nf" />

			<arg value="${libproject.abs.lib}" />
		</exec>

		<echo>
			It will need to be signed with jarsigner before being published.
		</echo>
	</target>

	<!-- 9Sign the APK. -->

	<target name="9genSignedApk" depends="7genUnsignedApk">

		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-verbose" />
			<arg value="-storepass" />
			<arg value="${keystore.password}" />
			<arg value="-keypass" /> 
			<arg value="${keystore.password}" />
			<arg value="-keystore" />
			<arg value="${keystore.path}" />
			<arg value="-signedjar" />
			<arg value="${signed.abs}" />
			<arg value="${unsigned.abs}" />
			<arg value="${keystore.alias}" />
		</exec>
	</target>
	
	<!-- 10Zipalign -->

	<target name="10zipalign" depends="9genSignedApk">

		<exec executable="${zipalign}" failonerror="true">

			<arg value="-v" />

			<arg value="-f" />

			<arg value="4" />

			<arg value="${signed.abs}" />

			<arg value="${bin.abs}/${ant.project.name}-final.apk" />
		</exec>
	</target>

	<!-- 替换工程中的文件 -->
	<target name="preparefiles" description="Prepare files for different partner">
		<replaceregexp encoding="utf-8" file="${basedir}/res/values/strings.xml" match='${app_name}' replace='${replace.appname}' byline="false" />

		<replaceregexp encoding="utf-8" file="${basedir}/res/values-zh-rCN/strings.xml" match='${app_name}' replace='${replace.appname}' byline="false" />

		<replaceregexp encoding="utf-8" file="${basedir}/res/values/strings.xml" match='${market_type}' replace='${market.type}' byline="false" />

		<replaceregexp encoding="utf-8" file="${basedir}/res/values-zh-rCN/strings.xml" match='${market_type}' replace='${market.type}' byline="false" />

		<replaceregexp file="${basedir}\AndroidManifest.xml" match='package="(.*)"' replace='package="${package.replacename}"' byline="false" />

		<replaceregexp file="${basedir}\AndroidManifest.xml" match='android:versionCode="(.*)"' replace='android:versionCode="${version.value}"' byline="false" />
        
        <replaceregexp file="${basedir}\AndroidManifest.xml" match='umengchannelkey' replace='${pkg.umappkey}' byline="false" />
		
		<replaceregexp file="${basedir}\AndroidManifest.xml" match='umchannel' replace='${umchannel.name}' byline="false" />

		

		<!-- change the package name in AndroidManifest -->
		<replaceregexp flags="g" byline="false">
			<regexp pattern="import(.*)${package.name}.R;" />
			<substitution expression="import ${package.replacename}.R;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="import(.*)${package.name}.R.id;" />
			<substitution expression="import ${package.replacename}.R.id;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="import(.*)${package.name}.R.layout;" />
			<substitution expression="import ${package.replacename}.R.layout;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="import(.*)${package.name}.CPActivity;" />
			<substitution expression="import ${package.replacename}.CPActivity;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="(package ${package.name};)" />
			<substitution expression="\1&#10;import ${package.replacename}.R;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="(package ${package.name};)" />
			<substitution expression="package ${package.replacename};" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>

		<replaceregexp flags="g" byline="false">
			<regexp pattern="import(.*)${package.name}.R.style;" />
			<substitution expression="import ${package.replacename}.R.style;" />
			<fileset dir="${basedir}\src" includes="**/*.java" />
		</replaceregexp>
	</target>

</project>